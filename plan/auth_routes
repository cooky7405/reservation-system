# 권한 관리 및 라우팅 설계

## 권한 레벨
```typescript
enum UserRole {
  ADMIN = 'ADMIN',
  USER = 'USER',
}
```

## 권한 기반 라우팅 로직

### 1. 인증 상태 확인
```typescript
// hooks/useAuth.ts
interface AuthState {
  isAuthenticated: boolean;
  user: {
    id: number;
    username: string;
    role: UserRole;
  } | null;
  accessToken: string | null;
}

const useAuth = () => {
  // 인증 상태 관리
  // 토큰 관리
  // 권한 확인
}
```

### 2. 라우트 보호
```typescript
// components/auth/ProtectedRoute.tsx
interface ProtectedRouteProps {
  requiredRole?: UserRole;
  children: React.ReactNode;
}

// 권한이 없는 경우 리다이렉션
```

### 3. 라우팅 규칙

#### 공개 라우트
- /
- /auth/login
- /auth/signup
- /auth/verify-email

#### 인증 필요 라우트
- /dashboard/* (기본 권한: USER)
- /dashboard/admin/* (필요 권한: ADMIN)

### 4. 리다이렉션 로직

1. 초기 접속 (/):
   - 비로그인 → /auth/login
   - 로그인 → /dashboard

2. 대시보드 접속:
   - ADMIN → AdminDashboard
   - USER → UserDashboard

3. 권한 없는 페이지 접근:
   - 로그인 페이지 또는 403 페이지로 리다이렉션

## 상태 관리

### 1. 전역 상태
```typescript
interface GlobalState {
  auth: AuthState;
  theme: ThemeState;
  notification: NotificationState;
}
```

### 2. 권한별 대시보드 설정
```typescript
interface DashboardConfig {
  menu: MenuItem[];
  widgets: WidgetConfig[];
  permissions: Permission[];
}

const dashboardConfigs: Record<UserRole, DashboardConfig> = {
  ADMIN: {
    menu: [
      { title: '사용자 관리', path: '/dashboard/admin/users' },
      { title: '시스템 설정', path: '/dashboard/admin/settings' },
      { title: '통계', path: '/dashboard/admin/analytics' },
    ],
    widgets: [
      { type: 'UserStats', position: 'top' },
      { type: 'SystemStatus', position: 'right' },
      { type: 'ActivityLog', position: 'bottom' },
    ],
    permissions: ['manage_users', 'manage_system', 'view_analytics'],
  },
  USER: {
    menu: [
      { title: '예약 현황', path: '/dashboard/reservations' },
      { title: '개인 설정', path: '/dashboard/settings' },
      { title: '알림', path: '/dashboard/notifications' },
    ],
    widgets: [
      { type: 'ReservationStatus', position: 'top' },
      { type: 'Notifications', position: 'right' },
      { type: 'QuickActions', position: 'bottom' },
    ],
    permissions: ['manage_reservations', 'view_notifications'],
  },
}
```

## 토큰 관리

### 1. 토큰 저장
- accessToken: 메모리 (상태)
- refreshToken: HTTP-only 쿠키

### 2. 토큰 갱신
- 401 에러 발생 시 자동 갱신
- 갱신 실패 시 로그아웃

### 3. 토큰 검증
- 모든 API 요청 시 헤더에 accessToken 포함
- 권한이 필요한 라우트 접근 시 검증 