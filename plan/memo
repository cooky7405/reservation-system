# 프로젝트 구조 및 특징 정리

## 1. 전체 구조

### 1.1 페이지 구조
```
pages/
├── auth/                # 인증 관련 페이지
│   ├── login.tsx       # 로그인
│   └── signup.tsx      # 회원가입
├── dashboard/          # 대시보드 페이지
│   ├── index.tsx      # 메인 대시보드
│   ├── admin/         # 관리자 전용
│   └── user/          # 일반 사용자 전용
└── index.tsx          # 메인 페이지
```

### 1.2 컴포넌트 구조
```
components/
├── auth/              # 인증 관련 컴포넌트
├── layout/            # 레이아웃 컴포넌트
├── dashboard/         # 대시보드 관련 컴포넌트
└── common/            # 공통 컴포넌트
```

## 2. 주요 특징

### 2.1 인증 시스템
- JWT 기반 토큰 인증
- Access Token과 Refresh Token 활용
- 이메일 인증 필수
- 자동 토큰 갱신 (401 에러 발생 시)
- HTTP-only 쿠키 사용 (Refresh Token)

### 2.2 권한 관리
- 역할 기반 접근 제어 (RBAC)
- 사용자 역할: ADMIN, USER
- 권한별 차별화된 대시보드
- 보호된 라우트 시스템

### 2.3 대시보드 구성
#### 관리자 대시보드
- 사용자 관리
- 시스템 설정
- 통계 및 분석
- 권한: manage_users, manage_system, view_analytics

#### 사용자 대시보드
- 예약 현황
- 개인 설정
- 알림 관리
- 권한: manage_reservations, view_notifications

### 2.4 UI/UX 특징
- 반응형 디자인 (모바일, 태블릿, 데스크톱)
- Tailwind CSS 기반 스타일링
- 모듈화된 컴포넌트 구조
- 직관적인 네비게이션
- 사용자 피드백 시스템

### 2.5 보안 특징
- 토큰 기반 인증
- 권한 기반 접근 제어
- 안전한 토큰 저장
- API 요청 인증 헤더 자동 처리

## 3. 기술 스택

### 3.1 프론트엔드
- Next.js
- TypeScript
- Tailwind CSS
- React Query (추정)

### 3.2 상태 관리
- 전역 상태 관리
  - 인증 상태
  - 테마 설정
  - 알림 상태

## 4. 확장성

### 4.1 컴포넌트 확장
- 모듈화된 구조로 새로운 컴포넌트 추가 용이
- 재사용 가능한 공통 컴포넌트

### 4.2 권한 확장
- 새로운 역할 추가 가능
- 권한별 설정 확장 가능
- 메뉴 및 위젯 동적 구성

### 4.3 대시보드 확장
- 위젯 기반 구조로 새로운 기능 추가 용이
- 권한별 커스텀 설정 가능
- 동적 메뉴 구성

## 5. 개발 고려사항

### 5.1 성능
- 컴포넌트 최적화
- 토큰 자동 갱신
- 효율적인 상태 관리

### 5.2 보안
- 토큰 관리
- 권한 검증
- API 요청 보안

### 5.3 사용자 경험
- 로딩 상태 표시
- 에러 처리
- 직관적인 인터페이스
- 반응형 디자인
